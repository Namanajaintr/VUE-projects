======================================================================================================
Assignment 1 
======================================================================================================
1.what is vue js

Vue.js is an open-source front end JavaScript framework for building user interfaces and single-page applications.
It was created by Evan You, and is maintained by him and the rest of the active core team members.
Vue.js allows for extending HTML with HTML attributes called directives.
The directives offer functionality to HTML applications, and come as either built-in or user defined directives.
--------------------------------------------------------------------------------------------------------------------

2.Why should we Choose vuejs

 Simplicity.
 Easy to Learn. (learning curve is less steep)
 Virtual DOM Performance and Rendering.
 Two-Way Binding.
 Readability and Single-File Components.

3. What is Single Page Applicaton?
navigate throuhgh the appln the page doesnot refresh.
A single-page application is a web application or website that interacts with the user by 
dynamically rewriting the current web page with new data from the web server without reloading the webpage

In a SPA, a page refresh never occurs; 
instead, all necessary HTML, JavaScript, and CSS code is either retrieved by the browser with a single page load.

4.Event:-
1. v-on:click
2. v-on:submit
3. v-on:scroll
4. v-on:keyup
5. v-on:change
6. v-on:mouseover
7. v-on:mouseout

5.Directives are instruction/directions for VueJS to do things in a certain way.
v-bind: instead of value attribute we need to bind. (:)
v-on:Attach an event listener to the element.(@)
v-html:Read the data in html and Update the element's innerHTML.
v-for:map or loop the array and objects
v-text:Update the element's text content.
v-model:Create a two-way binding on a form input element or a component.
v-once:to preserve initial value and it will be only evaluated once even any changes made it will not update.

6.Explain Two way data binding?
The v-model directive makes two-way binding between a form input and app state very easy to implement.
Component data:
data() {
  return {
    statementIsTrue: true  
  };
}
template :
<p>You have decided this statement is {{statementIsTrue}}</p>
<label>
  <input type="checkbox" v-model="statementIsTrue"/>
  Is this statement true?
</label>


======================================================================================================
Assignment 2 
======================================================================================================


2.Explain computed properties.
Computed properties enable us to create a property that can be used to modify, 
manipulate, and display data within your components in a readable and efficient manner. 
We can use computed properties to calculate and display values based on a value or set of values in the data model.
-Computed property used to optimise the performance.
-other functions will not be executed.

3.Explain Watchers.
There are cases where we need to perform "side effects(Asyncronous code)" in reaction to state changes - for example, mutating the DOM,
or changing another piece of state based on the result of an async operation.We use Watchers.
We can use the watch option to trigger a function whenever a reactive property changes.

Deep Watchers:
watch is shallow by default: the callback will only trigger when the watched property has been assigned a new value - 
it won't trigger on nested property changes. If you want the callback to fire on all nested mutations, you need to use a deep watcher.
By giving deep:true.

Eager Watchers:
watch is lazy by default.if we want to run watcher faster we use eager watchers .By making immediate: true option.

Stopping a Watcher:
To stop watcher we use unwatch.
 
4.Explain refs?
While Vue's declarative rendering model abstracts away most of the direct DOM operations.So, where we want to access real DOM  
we can use the special ref attribute. ref is a special attribute, 
similar to the key attribute.
It allows us to obtain a direct reference 
to a specific DOM element or child component instance after it's mounted.
you can only access the ref after the component is mounted. If you try to 
access $refs.input in a template expression, it will be null on the first 
render. This is because the element doesn't exist until after the first render

can get value from the input field directly


5.Explain the Life cycle Methods in Vue?

//Mounting phase
1)beforeCreate#
Called when the instance is initialized.

2)created#
Called after the instance has finished processing all state-related options.

3)beforeMount#
Called right before the component is to be mounted.

4)mounted#
Called after the component has been mounted.

//Updating phase
5)beforeUpdate#
Called right before the component is about to update its DOM tree due to a reactive state change.

6)updated#
Called after the component has updated its DOM tree due to a reactive state change.

//Unmounting phase
7)beforeUnmount#
Called right before a component instance is to be unmounted.

8)unmounted#
Called after the component has been unmounted.

======================================================================================================
Assignment 3
======================================================================================================
1. what are Props?
Props” is a special keyword which stands for properties. It can be registered on a component to pass data from a parent component to one of its children components.

<!-- Conditional Rendering:
 The directive v-if is used to conditionally
   render a block. The block will only be rendered if the directive's 
   expression returns a truthy value. You can use the v-else directive to 
   indicate an "else block" for v-if-->

How to avoid props drilling?
The same data is being sent at almost every level due to requirements in the final level.
In order to avoid props drilling, we use use provide/inject.

Explain provide & inject.
In order to avoid props drilling, we need to use provide/inject.
In the root component or in the parent component , we use provide . 
In the child component in the setup function, we get the value via inject .

======================================================================================================
Assignment 4
======================================================================================================
1. Explain Filters?
A Filter is a simple JavaScript function which is used to change the output of a data to the browser. Filters in Vue.
JS don't change the data directly wherever we store them, 
it only applies formatting to our data. The data remains the same only the output of a data to a browser is changed
there are two type of filters - local and global

2. Explain Mixins?
Mixins are a flexible way to distribute reusable functionalities for Vue components.
A mixin object can contain any component options. When a component uses a mixin, 
all options in the mixin will be “mixed” into the component’s own options.

3. What is Axios?
Axios is a promise-based HTTP client library for both browsers and Node.js applications, which means it can be used in both frontend JavaScript applications and backend Node servers.
We will build a Vue Client with Axios library to make CRUD requests to API :
Vue Axios GET request: get all Tutorials, get Tutorial by Id, find Tutorial by title
Vue Axios POST request: create new Tutorial
Vue Axios PUT request: update an existing Tutorial
Vue Axios DELETE request: delete a Tutorial, delete all Tutorials

4. Explain Axios instance and Axios Interceptors?

create instance
You can create a new instance of axios with a custom config.

const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});


interceptors

You can intercept requests or responses before they are handled by then or catch.

Axios interceptors are the default configurations that are added automatically to every 
request or response that a user receives. It is useful to check response status code for 
every response that is being received.

Interceptors are methods which are triggered before or after the main method. There are two types of interceptors:

request interceptor: - It allows you to write or execute a piece of your code before 
the request gets sent.

response interceptor: - It allows you to write or execute a piece of your code before 
response reaches the calling end.


5. Difference betweeen Fetch and Axios
*One base URL for performing all HTTP requests using axios , But in Fetch() while using HTTP methods , for every http req we have to provide the same URL everytime.
*Using Axios we can create multiple instances
*To send data, fetch() uses the body property for a post request to send data to the endpoint, while Axios uses the data property
*The data in fetch() is transformed to a string using the JSON.stringify method
*Axios automatically transforms the data returned from the server, but with fetch() you have to call the response.json method to parse the data to a JavaScript object. 
*With Axios, the data response provided by the server can be accessed with in the data object, while for the fetch() method, the final data can be named any variable.

======================================================================================================
Assignment 5
======================================================================================================
1. What is Axios Interceptors?
You can intercept requests or responses before they are handled by then or catch.

2. Create 5 resuable components?
Create reusable components in Vue
We will learn to build a reusable component in Vue, which will be used to reuse it in Create or Edit or anywhere that requires the same code and functionality. Reusing a component or code helps us avoid writing the same code and functionality multiple times.

3. Explain slots and Named slots?
*The <slot> element is a slot outlet that indicates where the parent-provided slot content should be rendered.
*There are times when it's useful to have multiple slot outlets in a single component.
For these cases, the <slot> element has a special attribute, name, which can be used to assign a unique ID to different slots so you can determine where content should be rendered:
A <slot> outlet without name implicitly has the name "default".
To pass a named slot, we need to use a <template> element with the v-slot directive, and then pass the name of the slot as an argument to v-slot:

======================================================================================================
Assignment 6
======================================================================================================

State: The object that holds our app's data.
Getters: Functions that return back data that resides in the state.
Mutations: Functions that directly mutate/change the state.
Actions: Functions that call mutations. Actions can call multiple mutations, other actions, and even other asynchronous operations.